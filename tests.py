#imports
import rsa
import prime_gen as pg
from primes_list import less_than_hundred_thousand
from random import randint
#imports#

#classes
#classes#

#functions
def gcd(a,b):#Mathematically proven to work, so doesn't require its own test?
    if(b == 0):
        return(a)
    else:
        return gcd(b,a%b)

def testPrimesGenerator():
    assert(pg.rabin_miller_is_prime(pg.generate_random_prime(1024)))

def testPrimeGeneratesIntengerOrLong():
    assert(type(pg.generate_random_prime(1024)) == long or type(pg.generate_random_prime(1024)== int))

def testExtendedGcd():
    a,b = randint(0,1024),randint(0,1024)
    x,y = rsa.extended_gcd(a,b)
    greaterCommonDivisor = gcd(a,b)
    result = x*a+y*b
    assert(result==greaterCommonDivisor)
def testEncryptWith512BitKey():
    publicKey = 3912496116771406502305695646465063643103884930752223971896608051794004081819064793056195274460494872095439180308341971206140569532968898825698332012359039
    privateKey = 11217303007991121785260718767787658298791283176666551465463439855893003455701504685940014125791357903271307619388403033690345381914390267307995706683583059
    ModN = 45540236702971111877539407618216943250230167372609441792990551464772351513676187009869043236356540256704295143017151038280032151591358132302997607813468933
    assert(rsa.encrypt(publicKey,ModN,'batata')=='''24429944298204863749063105197049189172042178777503140115860782369592242261917464804322832304091965465552284406493583949699584606156656309534212364145102269 153624948266553594849255
20637845614897292274817050617376059817360256290439559901409657948264436943761143268414013420379789259048173202842895423802804971524 8145841027412636973963574520438365787536634741466145082094
55006433217182075476162224460457377361007688732496497865349778362545699628053091078285268710797 1536249482665535948492552063784561489729227481705061737605981736025629043955990140965794826443
6943761143268414013420379789259048173202842895423802804971524 81458410274126369739635745204383657875366347414661450820945500643321718207547616222446045737736100768873249649786534977836254569
9628053091078285268710797 15362494826655359484925520637845614897292274817050617376059817360256290439559901409657948264436943761143268414013420379789259048173202842895423802804971524''')
def testDecryptWith512BitKey():
    publicKey = 3912496116771406502305695646465063643103884930752223971896608051794004081819064793056195274460494872095439180308341971206140569532968898825698332012359039
    privateKey = 11217303007991121785260718767787658298791283176666551465463439855893003455701504685940014125791357903271307619388403033690345381914390267307995706683583059
    ModN = 45540236702971111877539407618216943250230167372609441792990551464772351513676187009869043236356540256704295143017151038280032151591358132302997607813468933
    assert(rsa.decrypt(publicKey,ModN,'''24429944298204863749063105197049189172042178777503140115860782369592242261917464804322832304091965465552284406493583949699584606156656309534212364145102269 153624948266553594849255
20637845614897292274817050617376059817360256290439559901409657948264436943761143268414013420379789259048173202842895423802804971524 8145841027412636973963574520438365787536634741466145082094
55006433217182075476162224460457377361007688732496497865349778362545699628053091078285268710797 1536249482665535948492552063784561489729227481705061737605981736025629043955990140965794826443
6943761143268414013420379789259048173202842895423802804971524 81458410274126369739635745204383657875366347414661450820945500643321718207547616222446045737736100768873249649786534977836254569
9628053091078285268710797 15362494826655359484925520637845614897292274817050617376059817360256290439559901409657948264436943761143268414013420379789259048173202842895423802804971524''')=='batata')
#functions#

#variables
#variales#

#main
#main#

def main():
    return 0

if __name__ == "__main__":
    main()
